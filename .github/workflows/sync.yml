# 为这个工作流命名
name: sync.yml

on:
  # 你可以根据需要修改这个时间
  schedule:
    - cron: '0 21 * * *'
  # 允许你从仓库的 Actions 页面手动触发此工作流
  workflow_dispatch:

jobs:
  sync-with-upstream:
    # 使用最新版的 Ubuntu 虚拟机作为运行环境
    runs-on: ubuntu-latest
    steps:
      # 第一步：检出（Checkout）你的仓库代码
      # 这是官方提供的 Action，用于在虚拟机中拉取你的代码
      - name: Checkout Your Repository
        uses: actions/checkout@v4
        with:
          # `fetch-depth: 0` 会拉取所有的 commit 历史，这对于后续的 merge 操作是必需的
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 第二步：执行核心脚本：同步上游并保留个人数据
      - name: Sync with Upstream and Preserve Data
        run: |
          # =================================================================
          # 脚本开始
          # =================================================================
          
          # 设置脚本在遇到错误时立即退出
          set -e

          # 配置 git 用户信息，这样 Action 才能替你提交代码
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # --- 1. 备份你的数据文件 ---
          echo "Step 1: Backing up your data files..."
          # 创建一个临时文件夹来存放你的个人数据文件
          mkdir -p .sync_backup_temp
          # 查找所有需要保留的文件（png, csv, json, ini），并复制到临时文件夹
          # -maxdepth 1 参数确保只查找仓库根目录下的文件，避免误操作
          find . -maxdepth 1 \( -name "*.png" -o -name "*.csv" -o -name "*.json" -o -name "*.ini" \) -exec echo "  > Backing up {}" \; -exec cp {} .sync_backup_temp/ \; 2>/dev/null || true
          echo "Backup complete."

          # --- 2. 同步上游仓库 ---
          echo "Step 2: Syncing with upstream repository..."
          # 添加我的原仓库地址作为"上游" (upstream)，如果已存在则忽略错误
          git remote add upstream https://github.com/cli117/stock_monitor.git 2>/dev/null || echo "Upstream remote already exists"
          
          # 从上游仓库拉取最新的功能和代码
          echo "Fetching from upstream..."
          git fetch upstream
          
          # 检查上游分支是否存在（支持 main 或 master）
          if git show-ref --verify --quiet refs/remotes/upstream/main; then
            UPSTREAM_BRANCH="upstream/main"
            echo "Using upstream/main branch"
          elif git show-ref --verify --quiet refs/remotes/upstream/master; then
            UPSTREAM_BRANCH="upstream/master"
            echo "Using upstream/master branch"
          else
            echo "❌ Error: Neither main nor master branch found in upstream repository"
            echo "Available branches:"
            git branch -r | grep upstream/ || echo "No upstream branches found"
            exit 1
          fi

          # 尝试合并，如果有冲突则退出
          echo "Attempting to merge $UPSTREAM_BRANCH..."
          if ! git merge $UPSTREAM_BRANCH --allow-unrelated-histories --no-edit; then
            echo "❌ MERGE CONFLICT DETECTED!"
            echo "==================================="
            echo "Sync aborted due to merge conflicts."
            echo "Please resolve conflicts manually:"
            echo "1. Run: git status"
            echo "2. Resolve conflicts in affected files"
            echo "3. Run: git add <resolved-files>"
            echo "4. Run: git commit"
            echo "5. Run: git push"
            echo "==================================="
            
            # 清理：取消合并状态
            git merge --abort 2>/dev/null || true
            
            # 清理临时文件夹
            rm -rf .sync_backup_temp
            
            # 退出并标记为失败
            exit 1
          fi
          
          echo "✅ Merge successful - no conflicts detected"

          # --- 3. 恢复你的数据文件 ---
          echo "Step 3: Restoring your data files..."
          # 检查备份文件夹是否为空
          if [ -n "$(ls -A .sync_backup_temp/ 2>/dev/null)" ]; then
            # 如果不为空，就把备份的文件复制回来，覆盖掉从上游同步过来的版本
            cp -vf .sync_backup_temp/* . 2>/dev/null || echo "No files to restore"
            echo "✅ Restore complete."
          else
            echo "ℹ️  No data files needed to be restored."
          fi

          # --- 4. 清理临时文件夹 ---
          echo "Step 4: Cleaning up..."
          rm -rf .sync_backup_temp
          echo "✅ Cleanup complete."

          # --- 5. 提交并推送更新 ---
          echo "Step 5: Committing and pushing changes..."
          # 检查是否有文件变动（拉取到的新功能或你恢复的数据）
          if git diff --quiet && git diff --staged --quiet; then
            echo "ℹ️  Your repository is already up-to-date. No push needed."
          else
            echo "📝 Changes detected. Committing and pushing to your repository..."
            git add -A
            git commit -m "chore: Daily sync with upstream and preserve data [$(date +'%Y-%m-%d %H:%M:%S UTC')]"
            
            # 推送更改，如果失败则报错
            if git push; then
              echo "✅ Push successful!"
            else
              echo "❌ Push failed!"
              exit 1
            fi
          fi

          echo "🎉 Sync completed successfully!"
          
          # =================================================================
          # 脚本结束
          # =================================================================
