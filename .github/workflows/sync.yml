# 为这个工作流命名
name: Sync Upstream

on:
  # 你可以根据需要修改这个时间
  schedule:
    - cron: '0 21 * * *'
  # 允许你从仓库的 Actions 页面手动触发此工作流
  workflow_dispatch:

jobs:
  sync-with-upstream:
    # 使用最新版的 Ubuntu 虚拟机作为运行环境
    runs-on: ubuntu-latest
    steps:
      # 第一步：检出（Checkout）你的仓库代码
      - name: Checkout Your Repository
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 非常重要，它获取所有历史记录，以便进行后续操作
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 第二步：执行核心脚本：迁移、备份、同步、恢复
      - name: Migrate, Backup, Sync, and Restore
        run: |
          # =================================================================
          # 脚本开始
          # =================================================================
          
          set -e
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # --- 1. (新增) 自动为老用户迁移文件结构 ---
          echo "Step 1: Checking for legacy file structure and migrating if necessary..."
          if [ -f "portfolio_details_history.csv" ]; then
            echo "  > Legacy structure detected. Migrating data files to the 'data/' directory..."
            mkdir -p data
            find . -maxdepth 1 \( -name "*.csv" -o -name "*.json" -o -name "*.png" \) -exec git mv -f {} data/ \; || true
            echo "  ✅ Migration complete. Your data files are now in the 'data' folder."
            echo "  ℹ️  This change will be committed along with the upstream sync."
          else
            echo "  > Modern 'data/' directory structure confirmed. No migration needed."
          fi

          # --- 2. 备份你的数据文件 ---
          echo "Step 2: Backing up your personal files..."
          # 创建一个临时目录来存放备份
          mkdir -p .sync_backup_temp
          
          # 备份根目录的 config.ini
          if [ -f "config.ini" ]; then
            echo "  > Backing up config.ini..."
            cp config.ini .sync_backup_temp/
          fi
          
          # 备份整个 data 文件夹
          if [ -d "data" ]; then
            echo "  > Backing up the entire 'data' directory..."
            cp -r data .sync_backup_temp/
          fi
          echo "✅ Backup complete."

          # --- 3. 同步上游仓库 (核心修改部分) ---
          echo "Step 3: Syncing with upstream repository..."
          git remote add upstream https://github.com/cli117/stock_monitor.git 2>/dev/null || echo "Upstream remote already exists"
          echo "  > Fetching from upstream..."
          git fetch upstream
          
          # 确定上游的主分支是 main 还是 master
          if git show-ref --verify --quiet refs/remotes/upstream/main; then
            UPSTREAM_BRANCH="upstream/main"
          elif git show-ref --verify --quiet refs/remotes/upstream/master; then
            UPSTREAM_BRANCH="upstream/master"
          else
            echo "❌ Error: Neither main nor master branch found in upstream repository"
            exit 1
          fi
          
          echo "  > Hard resetting local branch to match $UPSTREAM_BRANCH..."
          # 使用 git reset --hard，强制让本地分支与上游分支完全一致
          # 这会丢弃本地的所有 commit，从而避免任何合并冲突
          git reset --hard $UPSTREAM_BRANCH
          echo "✅ Reset successful. Local branch now matches upstream."

          # --- 4. 恢复你的数据文件 ---
          echo "Step 4: Restoring your personal files..."
          # 检查备份文件夹是否存在且不为空
          if [ -n "$(ls -A .sync_backup_temp/ 2>/dev/null)" ]; then
            echo "  > Restoring config.ini and the 'data' directory..."
            # -r 递归复制, -f 强制覆盖，将备份的内容恢复到原位
            # 使用 `cp -rf .sync_backup_temp/. .` 确保能正确处理隐藏文件和目录
            cp -rf .sync_backup_temp/. .
            echo "✅ Restore complete."
          else
            echo "ℹ️  No personal files were found in the backup. Nothing to restore."
          fi

          # --- 5. 清理临时文件夹 ---
          echo "Step 5: Cleaning up temporary backup..."
          rm -rf .sync_backup_temp
          echo "✅ Cleanup complete."

          # --- 6. 提交并推送更新 (核心修改部分) ---
          echo "Step 6: Committing and pushing changes..."
          # 检查是否有文件变动（通常是恢复的个人数据文件）
          # `git add -A` 会暂存所有变动，包括恢复的文件和迁移的文件
          git add -A
          if git diff --staged --quiet; then
            echo "ℹ️  Your repository is already up-to-date. No push needed."
          else
            echo "📝 Changes detected. Committing and pushing to your repository..."
            # 修改 commit 信息，使其更准确
            git commit -m "chore: Sync with upstream and restore user data [$(date +'%Y-%m-%d %H:%M:%S UTC')]"
            
            echo "  > Force pushing changes to your repository..."
            # 因为我们重写了历史 (git reset --hard)，所以必须使用 --force
            # 这在这个场景下是安全的，因为它只影响用户的fork仓库
            if git push --force; then
              echo "✅ Push successful!"
            else
              echo "❌ Push failed!"
              exit 1
            fi
          fi

          echo "🎉 Sync completed successfully!"
          
          # =================================================================
          # 脚本结束
          # =================================================================
